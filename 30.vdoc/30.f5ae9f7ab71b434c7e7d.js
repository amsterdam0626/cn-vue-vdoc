webpackJsonp([30],{52:function(s,a,e){var l,n;__vdoc_config_=e(95),n=e(124),s.exports=l||{},s.exports.__esModule&&(s.exports=s.exports["default"]),n&&(("function"==typeof s.exports?s.exports.options:s.exports).html=n)},95:function(s,a){},124:function(s,a){s.exports='<h2 id=v-if>v-if</h2> <p>在字符串模板中，如 Handlebars，我们得像这样写一个条件块：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=comment>&lt;!-- Handlebars 模板 --&gt;</span></div><div class=line>{{#if ok}}</div><div class=line>  <span class=tag>&lt;<span class=name>h1</span>&gt;</span>Yes<span class=tag>&lt;/<span class=name>h1</span>&gt;</span></div><div class=line>{{/if}}</div></pre></td></tr></table></figure><p>在 Vue.js，我们使用 <code>v-if</code> 指令实现同样的功能：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>h1</span> <span class=attr>v-if</span>=<span class=string>"ok"</span>&gt;</span>Yes<span class=tag>&lt;/<span class=name>h1</span>&gt;</span></div></pre></td></tr></table></figure><p>也可以用 <code>v-else</code> 添加一个 &quot;else&quot; 块：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>h1</span> <span class=attr>v-if</span>=<span class=string>"ok"</span>&gt;</span>Yes<span class=tag>&lt;/<span class=name>h1</span>&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>h1</span> <span class=attr>v-else</span>&gt;</span>No<span class=tag>&lt;/<span class=name>h1</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=template-v-if>template v-if</h2> <p>因为 <code>v-if</code> 是一个指令，需要将它添加到一个元素上。但是如果我们想切换多个元素呢？此时我们可以把一个 <code>template</code> 元素当做包装元素，并在上面使用 <code>v-if</code>，最终的渲染结果不会包含它。</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>template</span> <span class=attr>v-if</span>=<span class=string>"ok"</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>h1</span>&gt;</span>Title<span class=tag>&lt;/<span class=name>h1</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>p</span>&gt;</span>Paragraph 1<span class=tag>&lt;/<span class=name>p</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>p</span>&gt;</span>Paragraph 2<span class=tag>&lt;/<span class=name>p</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>template</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=v-show>v-show</h2> <p>另一个根据条件展示元素的选项是 <code>v-show</code> 指令。用法大体上一样：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>h1</span> <span class=attr>v-show</span>=<span class=string>"ok"</span>&gt;</span>Hello!<span class=tag>&lt;/<span class=name>h1</span>&gt;</span></div></pre></td></tr></table></figure><p>不同的是有 <code>v-show</code> 的元素会始终渲染并保持在 DOM 中。<code>v-show</code> 是简单的切换元素的 CSS 属性 <code>display</code>。</p> <p>注意 <code>v-show</code> 不支持 <code>&lt;template&gt;</code> 语法。</p> <h2 id=v-else>v-else</h2> <p>可以用 <code>v-else</code> 指令给 <code>v-if</code> 或 <code>v-show</code> 添加一个 &quot;else 块&quot;：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-if</span>=<span class=string>"Math.random() &gt; 0.5"</span>&gt;</span></div><div class=line>  Sorry</div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-else</span>&gt;</span></div><div class=line>  Not sorry</div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p><code>v-else</code> 元素必须立即跟在 <code>v-if</code> 或 <code>v-show</code> 元素的后面——否则它不能被识别。</p> <h2 id=v-if-vs-v-show>v-if vs. v-show</h2> <p>在切换 <code>v-if</code> 块时，Vue.js 有一个局部编译/卸载过程，因为 <code>v-if</code> 之中的模板也可能包括数据绑定或子组件。<code>v-if</code> 是真实的条件渲染，因为它会确保条件块在切换当中合适地销毁与重建条件块内的事件监听器和子组件。</p> <p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。</p> <p>相比之下，<code>v-show</code> 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。</p> <p>一般来说，<code>v-if</code> 有更高的切换消耗而 <code>v-show</code> 有更高的初始渲染消耗。因此，如果需要频繁切换 <code>v-show</code> 较好，如果在运行时条件不大可能改变 <code>v-if</code> 较好。 </p>'}});