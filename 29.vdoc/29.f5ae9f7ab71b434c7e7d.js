webpackJsonp([29],{53:function(s,a,n){var i,l;__vdoc_config_=n(96),l=n(125),s.exports=i||{},s.exports.__esModule&&(s.exports=s.exports["default"]),l&&(("function"==typeof s.exports?s.exports.options:s.exports).html=l)},96:function(s,a){},125:function(s,a){s.exports='<h2 id=->基础</h2> <p>除了内置指令，Vue.js 也允许注册自定义指令。自定义指令提供一种机制将数据的变化映射为 DOM 行为。</p> <p>可以用 <code>Vue.directive(id, definition)</code> 方法注册一个全局自定义指令，它接收两个参数<strong>指令 ID</strong> 与<strong>定义对象</strong>。也可以用组件的 <code>directives</code> 选项注册一个局部自定义指令。</p> <h3 id=->钩子函数</h3> <p>定义对象可以提供几个钩子函数（都是可选的）：</p> <ul> <li><p><strong>bind</strong>：只调用一次，在指令第一次绑定到元素上时调用。</p> </li> <li><p><strong>update</strong>： 在 <code>bind</code> 之后立即以初始值为参数第一次调用，之后每当绑定值变化时调用，参数为新值与旧值。</p> </li> <li><p><strong>unbind</strong>：只调用一次，在指令从元素上解绑时调用。</p> </li> </ul> <p><strong>示例</strong></p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'my-directive\'</span>, {</div><div class=line>  bind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=comment>// 准备工作</span></div><div class=line>    <span class=comment>// 例如，添加事件处理器或只需要运行一次的高耗任务</span></div><div class=line>  },</div><div class=line>  update: <span class=function><span class=keyword>function</span> (<span class=params>newValue, oldValue</span>) </span>{</div><div class=line>    <span class=comment>// 值更新时的工作</span></div><div class=line>    <span class=comment>// 也会以初始值为参数调用一次</span></div><div class=line>  },</div><div class=line>  unbind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=comment>// 清理工作</span></div><div class=line>    <span class=comment>// 例如，删除 bind() 添加的事件监听器</span></div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p>在注册之后，便可以在 Vue.js 模板中这样用（记着添加前缀 <code>v-</code>）：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-my-directive</span>=<span class=string>"someValue"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p>当只需要 <code>update</code> 函数时，可以传入一个函数替代定义对象：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'my-directive\'</span>, <span class=function><span class=keyword>function</span> (<span class=params>value</span>) </span>{</div><div class=line>  <span class=comment>// 这个函数用作 update()</span></div><div class=line>})</div></pre></td></tr></table></figure><h3 id=->指令实例属性</h3> <p>所有的钩子函数将被复制到实际的<strong>指令对象</strong>中，钩子内 <code>this</code> 指向这个指令对象。这个对象暴露了一些有用的属性：</p> <ul> <li><strong>el</strong>: 指令绑定的元素。</li> <li><strong>vm</strong>: 拥有该指令的上下文 ViewModel。</li> <li><strong>expression</strong>: 指令的表达式，不包括参数和过滤器。</li> <li><strong>arg</strong>: 指令的参数。</li> <li><strong>name</strong>: 指令的名字，不包含前缀。</li> <li><strong>modifiers</strong>: 一个对象，包含指令的修饰符。</li> <li><strong>descriptor</strong>: 一个对象，包含指令的解析结果。</li> </ul> <p class=tip>你应当将这些属性视为只读的，不要修改它们。你也可以给指令对象添加自定义属性，但是注意不要覆盖已有的内部属性。</p> <p>示例：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>id</span>=<span class=string>"demo"</span> <span class=attr>v-demo:hello.a.b</span>=<span class=string>"msg"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'demo\'</span>, {</div><div class=line>  bind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=built_in>console</span>.log(<span class=string>\'demo bound!\'</span>)</div><div class=line>  },</div><div class=line>  update: <span class=function><span class=keyword>function</span> (<span class=params>value</span>) </span>{</div><div class=line>    <span class=keyword>this</span>.el.innerHTML =</div><div class=line>      <span class=string>\'name - \'</span>       + <span class=keyword>this</span>.name + <span class=string>\'&lt;br&gt;\'</span> +</div><div class=line>      <span class=string>\'expression - \'</span> + <span class=keyword>this</span>.expression + <span class=string>\'&lt;br&gt;\'</span> +</div><div class=line>      <span class=string>\'argument - \'</span>   + <span class=keyword>this</span>.arg + <span class=string>\'&lt;br&gt;\'</span> +</div><div class=line>      <span class=string>\'modifiers - \'</span>  + <span class=built_in>JSON</span>.stringify(<span class=keyword>this</span>.modifiers) + <span class=string>\'&lt;br&gt;\'</span> +</div><div class=line>      <span class=string>\'value - \'</span>      + value</div><div class=line>  }</div><div class=line>})</div><div class=line><span class=keyword>var</span> demo = <span class=keyword>new</span> Vue({</div><div class=line>  el: <span class=string>\'#demo\'</span>,</div><div class=line>  data: {</div><div class=line>    msg: <span class=string>\'hello!\'</span></div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p><strong>结果</strong></p> <p></p><div id=demo v-demo:hello.a.b=msg></div><p></p> <script>Vue.directive("demo",{bind:function(){console.log("demo bound!")},update:function(e){this.el.innerHTML="name - "+this.name+"<br>expression - "+this.expression+"<br>argument - "+this.arg+"<br>modifiers - "+JSON.stringify(this.modifiers)+"<br>value - "+e}});var demo=new Vue({el:"#demo",data:{msg:"hello!"}})</script> <h3 id=->对象字面量</h3> <p>如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令可以使用任意合法的 JavaScript 表达式：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-demo</span>=<span class=string>"{ color: \'white\', text: \'hello!\' }"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'demo\'</span>, <span class=function><span class=keyword>function</span> (<span class=params>value</span>) </span>{</div><div class=line>  <span class=built_in>console</span>.log(value.color) <span class=comment>// "white"</span></div><div class=line>  <span class=built_in>console</span>.log(value.text) <span class=comment>// "hello!"</span></div><div class=line>})</div></pre></td></tr></table></figure><h3 id=->字面修饰符</h3> <p>当指令使用了字面修饰符，它的值将按普通字符串处理并传递给 <code>update</code> 方法。<code>update</code> 方法将只调用一次，因为普通字符串不能响应数据变化。</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-demo.literal</span>=<span class=string>"foo bar baz"</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'demo\'</span>, <span class=function><span class=keyword>function</span> (<span class=params>value</span>) </span>{</div><div class=line>  <span class=built_in>console</span>.log(value) <span class=comment>// "foo bar baz"</span></div><div class=line>})</div></pre></td></tr></table></figure><h3 id=->元素指令</h3> <p>有时我们想以自定义元素的形式使用指令，而不是以特性的形式。这与 Angular 的 “E” 指令非常相似。元素指令可以看做是一个轻量组件。可以像下面这样注册一个自定义元素指令：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.elementDirective(<span class=string>\'my-directive\'</span>, {</div><div class=line>  <span class=comment>// API 同普通指令</span></div><div class=line>  bind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=comment>// 操作 this.el...</span></div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p>不这样写：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-my-directive</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p>这样写：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>my-directive</span>&gt;</span><span class=tag>&lt;/<span class=name>my-directive</span>&gt;</span></div></pre></td></tr></table></figure><p>元素指令不能接受参数或表达式，但是它可以读取元素的特性从而决定它的行为。</p> <p>迥异于普通指令，元素指令是<strong>终结性</strong>的，这意味着，一旦 Vue 遇到一个元素指令，它将跳过该元素及其子元素——只有该元素指令本身可以操作该元素及其子元素。</p> <h2 id=->高级选项</h2> <h3 id=params>params</h3> <p>自定义指令可以接收一个 <code>params</code> 数组，指定一个特性列表，Vue 编译器将自动提取绑定元素的这些特性。例如：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-example</span> <span class=attr>a</span>=<span class=string>"hi"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'example\'</span>, {</div><div class=line>  params: [<span class=string>\'a\'</span>],</div><div class=line>  bind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=built_in>console</span>.log(<span class=keyword>this</span>.params.a) <span class=comment>// -&gt; "hi"</span></div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p>此 API 也支持动态属性。<code>this.params[key]</code> 会自动保持更新。另外，可以指定一个回调，在值变化时调用：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-example</span> <span class=attr>v-bind:a</span>=<span class=string>"someValue"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'example\'</span>, {</div><div class=line>  params: [<span class=string>\'a\'</span>],</div><div class=line>  paramWatchers: {</div><div class=line>    a: <span class=function><span class=keyword>function</span> (<span class=params>val, oldVal</span>) </span>{</div><div class=line>      <span class=built_in>console</span>.log(<span class=string>\'a changed!\'</span>)</div><div class=line>    }</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p class=tip>类似于 props，指令参数的名字在 JavaScript 中使用 camelCase 风格，在 HTML 中对应使用 kebab-case 风格。例如，假设在模板里有一个参数 <code>disable-effect</code>，在 JavaScript 里以 <code>disableEffect</code> 访问它。</p> <h3 id=deep>deep</h3> <p>如果自定义指令用在一个对象上，当对象内部属性变化时要触发 <code>update</code>，则在指令定义对象中指定 <code>deep: true</code>。</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-my-directive</span>=<span class=string>"obj"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'my-directive\'</span>, {</div><div class=line>  deep: <span class=literal>true</span>,</div><div class=line>  update: <span class=function><span class=keyword>function</span> (<span class=params>obj</span>) </span>{</div><div class=line>    <span class=comment>// 在 `obj` 的嵌套属性变化时调用</span></div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><h3 id=twoway>twoWay</h3> <p>如果指令想向 Vue 实例写回数据，则在指令定义对象中指定 <code>twoWay: true</code> 。该选项允许在指令中使用 <code>this.set(value)</code>:</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'example\'</span>, {</div><div class=line>  twoWay: <span class=literal>true</span>,</div><div class=line>  bind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=keyword>this</span>.handler = <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>      <span class=comment>// 将数据写回 vm</span></div><div class=line>      <span class=comment>// 如果指令这样绑定 v-example="a.b.c"</span></div><div class=line>      <span class=comment>// 它将用给定值设置 `vm.a.b.c`</span></div><div class=line>      <span class=keyword>this</span>.set(<span class=keyword>this</span>.el.value)</div><div class=line>    }.bind(<span class=keyword>this</span>)</div><div class=line>    <span class=keyword>this</span>.el.addEventListener(<span class=string>\'input\'</span>, <span class=keyword>this</span>.handler)</div><div class=line>  },</div><div class=line>  unbind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=keyword>this</span>.el.removeEventListener(<span class=string>\'input\'</span>, <span class=keyword>this</span>.handler)</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><h3 id=acceptstatement>acceptStatement</h3> <p>传入 <code>acceptStatement:true</code> 可以让自定义指令接受内联语句，就像 <code>v-on</code> 那样：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-my-directive</span>=<span class=string>"a++"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.directive(<span class=string>\'my-directive\'</span>, {</div><div class=line>  acceptStatement: <span class=literal>true</span>,</div><div class=line>  update: <span class=function><span class=keyword>function</span> (<span class=params>fn</span>) </span>{</div><div class=line>    <span class=comment>// 传入值是一个函数</span></div><div class=line>    <span class=comment>// 在调用它时将在所属实例作用域内计算 "a++" 语句</span></div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p>明智地使用，因为通常你要在模板中避免副效应。</p> <h3 id=terminal>terminal</h3> <blockquote> <p>1.0.19+</p> </blockquote> <p>Vue 通过递归遍历 DOM 树来编译模块。但是当它遇到 <strong>terminal</strong> 指令时会停止遍历这个元素的后代元素。这个指令将接管编译这个元素及其后代元素的任务。<code>v-if</code> 和 <code>v-for</code> 都是 terminal 指令。</p> <p>编写自定义 terminal 指令是一个高级话题，需要较好的理解 Vue 的编译流程，但这不是说不可能编写自定义 terminal 指令。用 <code>terminal: true</code> 指定自定义 terminal 指令，可能还需要用 <code>Vue.FragmentFactory</code> 来编译 partial。下面是一个自定义 terminal 指令，它编译它的内容模板并将结果注入到页面的另一个地方：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> FragmentFactory = Vue.FragmentFactory</div><div class=line><span class=keyword>var</span> remove = Vue.util.remove</div><div class=line><span class=keyword>var</span> createAnchor = Vue.util.createAnchor</div><div class=line></div><div class=line>Vue.directive(<span class=string>\'inject\'</span>, {</div><div class=line>  terminal: <span class=literal>true</span>,</div><div class=line>  bind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=keyword>var</span> container = <span class=built_in>document</span>.getElementById(<span class=keyword>this</span>.arg)</div><div class=line>    <span class=keyword>this</span>.anchor = createAnchor(<span class=string>\'v-inject\'</span>)</div><div class=line>    container.appendChild(<span class=keyword>this</span>.anchor)</div><div class=line>    remove(<span class=keyword>this</span>.el)</div><div class=line>    <span class=keyword>var</span> factory = <span class=keyword>new</span> FragmentFactory(<span class=keyword>this</span>.vm, <span class=keyword>this</span>.el)</div><div class=line>    <span class=keyword>this</span>.frag = factory.create(<span class=keyword>this</span>._host, <span class=keyword>this</span>._scope, <span class=keyword>this</span>._frag)</div><div class=line>    <span class=keyword>this</span>.frag.before(<span class=keyword>this</span>.anchor)</div><div class=line>  },</div><div class=line>  unbind: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=keyword>this</span>.frag.remove()</div><div class=line>    remove(<span class=keyword>this</span>.anchor)</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>id</span>=<span class=string>"modal"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div><div class=line>...</div><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-inject:modal</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>h1</span>&gt;</span>header<span class=tag>&lt;/<span class=name>h1</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>p</span>&gt;</span>body<span class=tag>&lt;/<span class=name>p</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>p</span>&gt;</span>footer<span class=tag>&lt;/<span class=name>p</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p>如果你想编写自定义 terminal 指令，建议你通读内置 terminal 指令的源码，如 <code>v-if</code> 和 <code>v-for</code>，以便更好地了解 Vue 的内部机制。</p> <h3 id=priority>priority</h3> <p>可以给指令指定一个优先级。如果没有指定，普通指令默认是 <code>1000</code>， terminal 指令默认是 <code>2000</code>。同一个元素上优先级高的指令会比其它指令处理得早一些。优先级一样的指令按照它在元素特性列表中出现的顺序依次处理，但是不能保证这个顺序在不同的浏览器中是一致的。</p> <p>可以在 <a href=/api/#指令>API</a> 中查看内置指令的优先级。另外，流程控制指令 <code>v-if</code> 和 <code>v-for</code> 在编译过程中始终拥有最高的优先级。 </p>'}});