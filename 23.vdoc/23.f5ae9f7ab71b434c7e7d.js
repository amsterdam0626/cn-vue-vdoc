webpackJsonp([23],{60:function(s,a,e){var l,i;__vdoc_config_=e(106),i=e(132),s.exports=l||{},s.exports.__esModule&&(s.exports=s.exports["default"]),i&&(("function"==typeof s.exports?s.exports.options:s.exports).html=i)},106:function(s,a){},132:function(s,a){s.exports='<h2 id=v-for>v-for</h2> <p>可以使用 <code>v-for</code> 指令基于一个数组渲染一个列表。这个指令使用特殊的语法，形式为 <code>item in items</code>，<code>items</code> 是数据数组，<code>item</code> 是当前数组元素的<strong>别名</strong>：</p> <p><strong>示例：</strong></p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>ul</span> <span class=attr>id</span>=<span class=string>"example-1"</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>li</span> <span class=attr>v-for</span>=<span class=string>"item in items"</span>&gt;</span></div><div class=line>    {{ item.message }}</div><div class=line>  <span class=tag>&lt;/<span class=name>li</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>ul</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> example1 = <span class=keyword>new</span> Vue({</div><div class=line>  el: <span class=string>\'#example-1\'</span>,</div><div class=line>  data: {</div><div class=line>    items: [</div><div class=line>      { message: <span class=string>\'Foo\'</span> },</div><div class=line>      { message: <span class=string>\'Bar\'</span> }</div><div class=line>    ]</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p><strong>结果：</strong></p> <p><ul id=example-1 class=demo> <li v-for="item in items"> {{item.message}} </li> </ul></p> <script>var example1=new Vue({el:"#example-1",data:{items:[{message:"Foo"},{message:"Bar"}]},watch:{items:function(){smoothScroll.animateScroll(null,"#example-1")}}})</script> <p>在 <code>v-for</code> 块内我们能完全访问父组件作用域内的属性，另有一个特殊变量 <code>$index</code>，正如你猜到的，它是当前数组元素的索引：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>ul</span> <span class=attr>id</span>=<span class=string>"example-2"</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>li</span> <span class=attr>v-for</span>=<span class=string>"item in items"</span>&gt;</span></div><div class=line>    {{ parentMessage }} - {{ $index }} - {{ item.message }}</div><div class=line>  <span class=tag>&lt;/<span class=name>li</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>ul</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> example2 = <span class=keyword>new</span> Vue({</div><div class=line>  el: <span class=string>\'#example-2\'</span>,</div><div class=line>  data: {</div><div class=line>    parentMessage: <span class=string>\'Parent\'</span>,</div><div class=line>    items: [</div><div class=line>      { message: <span class=string>\'Foo\'</span> },</div><div class=line>      { message: <span class=string>\'Bar\'</span> }</div><div class=line>    ]</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p><strong>结果：</strong></p> <p>{% raw%}</p> <p><ul id=example-2 class=demo> <li v-for="item in items"> {{ parentMessage }} - {{ $index }} - {{ item.message }} </li> </ul></p> <script>var example2=new Vue({el:"#example-2",data:{parentMessage:"Parent",items:[{message:"Foo"},{message:"Bar"}]},watch:{items:function(){smoothScroll.animateScroll(null,"#example-2")}}})</script> <p>另外，你可以为索引指定一个别名（如果 <code>v-for</code> 用于一个对象，则可以为对象的键指定一个别名）：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-for</span>=<span class=string>"(index, item) in items"</span>&gt;</span></div><div class=line>  {{ index }} {{ item.message }}</div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p>从 1.0.17 开始可以使用 <code>of</code> 分隔符，更接近 JavaScript 遍历器语法：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-for</span>=<span class=string>"item of items"</span>&gt;</span><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=template-v-for>template v-for</h2> <p>类似于 template <code>v-if</code>，也可以将 <code>v-for</code> 用在 <code>&lt;template&gt;</code> 标签上，以渲染一个包含多个元素的块。例如：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>ul</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>template</span> <span class=attr>v-for</span>=<span class=string>"item in items"</span>&gt;</span></div><div class=line>    <span class=tag>&lt;<span class=name>li</span>&gt;</span>{{ item.msg }}<span class=tag>&lt;/<span class=name>li</span>&gt;</span></div><div class=line>    <span class=tag>&lt;<span class=name>li</span> <span class=attr>class</span>=<span class=string>"divider"</span>&gt;</span><span class=tag>&lt;/<span class=name>li</span>&gt;</span></div><div class=line>  <span class=tag>&lt;/<span class=name>template</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>ul</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=->数组变动检测</h2> <h3 id=->变异方法</h3> <p>Vue.js 包装了被观察数组的变异方法，故它们能触发视图更新。被包装的方法有：</p> <ul> <li><code>push()</code></li> <li><code>pop()</code></li> <li><code>shift()</code></li> <li><code>unshift()</code></li> <li><code>splice()</code></li> <li><code>sort()</code></li> <li><code>reverse()</code></li> </ul> <p>你可以打开浏览器的控制台，用这些方法修改上例的 <code>items</code> 数组。例如：<code>example1.items.push({ message: &#39;Baz&#39; })</code>。</p> <h3 id=->替换数组</h3> <p>变异方法，如名字所示，修改了原始数组。相比之下，也有非变异方法，如 <code>filter()</code>, <code>concat()</code> 和 <code>slice()</code>，不会修改原始数组而是返回一个新数组。在使用非变异方法时，可以直接用新数组替换旧数组：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line>example1.items = example1.items.filter(<span class=function><span class=keyword>function</span> (<span class=params>item</span>) </span>{</div><div class=line>  <span class=keyword>return</span> item.message.match(<span class=regexp>/Foo/</span>)</div><div class=line>})</div></pre></td></tr></table></figure><p>可能你觉得这将导致 Vue.js 弃用已有 DOM 并重新渲染整个列表——幸运的是并非如此。 Vue.js 实现了一些启发算法，以最大化复用 DOM 元素，因而用另一个数组替换数组是一个非常高效的操作。</p> <h3 id=track-by>track-by</h3> <p>有时需要用全新对象（例如通过 API 调用创建的对象）替换数组。因为 <code>v-for</code> 默认通过数据对象的特征来决定对已有作用域和 DOM 元素的复用程度，这可能导致重新渲染整个列表。但是，如果每个对象都有一个唯一 ID 的属性，便可以使用 <code>track-by</code> 特性给 Vue.js 一个提示，Vue.js 因而能尽可能地复用已有实例。</p> <p>例如，假定数据为：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line>{</div><div class=line>  items: [</div><div class=line>    { _uid: <span class=string>\'88f869d\'</span>, ... },</div><div class=line>    { _uid: <span class=string>\'7496c10\'</span>, ... }</div><div class=line>  ]</div><div class=line>}</div></pre></td></tr></table></figure><p>然后可以这样给出提示：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-for</span>=<span class=string>"item in items"</span> <span class=attr>track-by</span>=<span class=string>"_uid"</span>&gt;</span></div><div class=line>  <span class=comment>&lt;!-- content --&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p>然后在替换数组 <code>items</code> 时，如果 Vue.js 遇到一个包含 <code>_uid: &#39;88f869d&#39;</code> 的新对象，它知道它可以复用这个已有对象的作用域与 DOM 元素。</p> <h3 id=track-by-index>track-by $index</h3> <p>如果没有唯一的键供追踪，可以使用 <code>track-by=&quot;$index&quot;</code>，它强制让 <code>v-for</code> 进入原位更新模式：片断不会被移动，而是简单地以对应索引的新值刷新。这种模式也能处理数据数组中重复的值。</p> <p>这让数据替换非常高效，但是也会付出一定的代价。因为这时 DOM 节点不再映射数组元素顺序的改变，不能同步临时状态（比如 <code>&lt;input&gt;</code> 元素的值）以及组件的私有状态。因此，如果 <code>v-for</code> 块包含 <code>&lt;input&gt;</code> 元素或子组件，要小心使用 <code>track-by=&quot;$index&quot;</code></p> <h3 id=->问题</h3> <p>因为 JavaScript 的限制，Vue.js <strong>不能</strong>检测到下面数组变化：</p> <ol> <li>直接用索引设置元素，如 <code>vm.items[0] = {}</code>；</li> <li>修改数据的长度，如 <code>vm.items.length = 0</code>。</li> </ol> <p>为了解决问题 (1)，Vue.js 扩展了观察数组，为它添加了一个 <code>$set()</code> 方法：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=comment>// 与 `example1.items[0] = ...` 相同，但是能触发视图更新</span></div><div class=line>example1.items.$set(<span class=number>0</span>, { childMsg: <span class=string>\'Changed!\'</span>})</div></pre></td></tr></table></figure><p>至于问题 (2)，只需用一个空数组替换 <code>items</code>。</p> <p>除了 <code>$set()</code>， Vue.js 也为观察数组添加了 <code>$remove()</code> 方法，用于从目标数组中查找并删除元素，在内部它调用 <code>splice()</code> 。因此，不必这样：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> index = <span class=keyword>this</span>.items.indexOf(item)</div><div class=line><span class=keyword>if</span> (index !== <span class=number>-1</span>) {</div><div class=line>  <span class=keyword>this</span>.items.splice(index, <span class=number>1</span>)</div><div class=line>}</div></pre></td></tr></table></figure><p>只用这样：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>this</span>.items.$remove(item)</div></pre></td></tr></table></figure><h2 id=-v-for>对象 v-for</h2> <p>也可以使用 <code>v-for</code> 遍历对象。除了 <code>$index</code> 之外，作用域内还可以访问另外一个特殊变量 <code>$key</code>。</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>ul</span> <span class=attr>id</span>=<span class=string>"repeat-object"</span> <span class=attr>class</span>=<span class=string>"demo"</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>li</span> <span class=attr>v-for</span>=<span class=string>"value in object"</span>&gt;</span></div><div class=line>    {{ $key }} : {{ value }}</div><div class=line>  <span class=tag>&lt;/<span class=name>li</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>ul</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>new</span> Vue({</div><div class=line>  el: <span class=string>\'#repeat-object\'</span>,</div><div class=line>  data: {</div><div class=line>    object: {</div><div class=line>      FirstName: <span class=string>\'John\'</span>,</div><div class=line>      LastName: <span class=string>\'Doe\'</span>,</div><div class=line>      Age: <span class=number>30</span></div><div class=line>    }</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p><strong>结果：</strong></p> <p><ul id=repeat-object class=demo> <li v-for="value in object"> {{ $key }} : {{ value }} </li> </ul></p> <script>new Vue({el:"#repeat-object",data:{object:{FirstName:"John",LastName:"Doe",Age:30}}})</script> <p>也可以给对象的键提供一个别名：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-for</span>=<span class=string>"(key, val) in object"</span>&gt;</span></div><div class=line>  {{ key }} {{ val }}</div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p class=tip>在遍历对象时，是按 <code>Object.keys()</code> 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。</p> <h2 id=-v-for>值域 v-for</h2> <p><code>v-for</code> 也可以接收一个整数，此时它将重复模板数次。</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>span</span> <span class=attr>v-for</span>=<span class=string>"n in 10"</span>&gt;</span>{{ n }} <span class=tag>&lt;/<span class=name>span</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p>结果：</p> <p></p><div id=range class=demo> <span v-for="n in 10">{{ n }} </span> </div><p></p> <script>new Vue({el:"#range"})</script> <h2 id=->显示过滤/排序的结果</h2> <p>有时我们想显示过滤/排序过的数组，同时不实际修改或重置原始数据。有两个办法：</p> <ol> <li>创建一个计算属性，返回过滤/排序过的数组；</li> <li>使用内置的过滤器 <code>filterBy</code> 和 <code>orderBy</code>。</li> </ol> <p>计算属性有更好的控制力，也更灵活，因为它是全功能 JavaScript。但是通常过滤器更方便，详细见 <a href=/api/#filterBy>API</a>。 </p>'}});