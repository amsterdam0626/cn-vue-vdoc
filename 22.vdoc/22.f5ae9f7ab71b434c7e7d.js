webpackJsonp([22],{61:function(s,i,a){var n,l;__vdoc_config_=a(104),l=a(133),s.exports=n||{},s.exports.__esModule&&(s.exports=s.exports["default"]),l&&(("function"==typeof s.exports?s.exports.options:s.exports).html=l)},104:function(s,i){},133:function(s,i){s.exports='<h2 id=->基础</h2> <p>混合以一种灵活的方式为组件提供分布复用功能。混合对象可以包含任意的组件选项。当组件使用了混合对象时，混合对象的所有选项将被“混入”组件自己的选项中。</p> <p>示例：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=comment>// 定义一个混合对象</span></div><div class=line><span class=keyword>var</span> myMixin = {</div><div class=line>  created: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=keyword>this</span>.hello()</div><div class=line>  },</div><div class=line>  methods: {</div><div class=line>    hello: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>      <span class=built_in>console</span>.log(<span class=string>\'hello from mixin!\'</span>)</div><div class=line>    }</div><div class=line>  }</div><div class=line>}</div><div class=line></div><div class=line><span class=comment>// 定义一个组件，使用这个混合对象</span></div><div class=line><span class=keyword>var</span> Component = Vue.extend({</div><div class=line>  mixins: [myMixin]</div><div class=line>})</div><div class=line></div><div class=line><span class=keyword>var</span> component = <span class=keyword>new</span> Component() <span class=comment>// -&gt; "hello from mixin!"</span></div></pre></td></tr></table></figure><h2 id=->选项合并</h2> <p>当混合对象与组件包含同名选项时，这些选项将以适当的策略合并。例如，同名钩子函数被并入一个数组，因而都会被调用。另外，混合的钩子将在组件自己的钩子<strong>之前</strong>调用。</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> mixin = {</div><div class=line>  created: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=built_in>console</span>.log(<span class=string>\'mixin hook called\'</span>)</div><div class=line>  }</div><div class=line>}</div><div class=line></div><div class=line><span class=keyword>new</span> Vue({</div><div class=line>  mixins: [mixin],</div><div class=line>  created: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=built_in>console</span>.log(<span class=string>\'component hook called\'</span>)</div><div class=line>  }</div><div class=line>})</div><div class=line></div><div class=line><span class=comment>// -&gt; "mixin hook called"</span></div><div class=line><span class=comment>// -&gt; "component hook called"</span></div></pre></td></tr></table></figure><p>值为对象的选项，如 <code>methods</code>, <code>components</code> 和 <code>directives</code> 将合并到同一个对象内。如果键冲突则组件的选项优先。</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> mixin = {</div><div class=line>  methods: {</div><div class=line>    foo: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>      <span class=built_in>console</span>.log(<span class=string>\'foo\'</span>)</div><div class=line>    },</div><div class=line>    conflicting: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>      <span class=built_in>console</span>.log(<span class=string>\'from mixin\'</span>)</div><div class=line>    }</div><div class=line>  }</div><div class=line>}</div><div class=line></div><div class=line><span class=keyword>var</span> vm = <span class=keyword>new</span> Vue({</div><div class=line>  mixins: [mixin],</div><div class=line>  methods: {</div><div class=line>    bar: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>      <span class=built_in>console</span>.log(<span class=string>\'bar\'</span>)</div><div class=line>    },</div><div class=line>    conflicting: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>      <span class=built_in>console</span>.log(<span class=string>\'from self\'</span>)</div><div class=line>    }</div><div class=line>  }</div><div class=line>})</div><div class=line></div><div class=line>vm.foo() <span class=comment>// -&gt; "foo"</span></div><div class=line>vm.bar() <span class=comment>// -&gt; "bar"</span></div><div class=line>vm.conflicting() <span class=comment>// -&gt; "from self"</span></div></pre></td></tr></table></figure><p>注意 <code>Vue.extend()</code> 使用同样的合并策略。</p> <h2 id=->全局混合</h2> <p>也可以全局注册混合。小心使用！一旦全局注册混合，它会影响<strong>所有</strong>之后创建的 Vue 实例。如果使用恰当，可以为自定义选项注入处理逻辑：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=comment>// 为 `myOption` 自定义选项注入一个处理器</span></div><div class=line>Vue.mixin({</div><div class=line>  created: <span class=function><span class=keyword>function</span> (<span class=params></span>) </span>{</div><div class=line>    <span class=keyword>var</span> myOption = <span class=keyword>this</span>.$options.myOption</div><div class=line>    <span class=keyword>if</span> (myOption) {</div><div class=line>      <span class=built_in>console</span>.log(myOption)</div><div class=line>    }</div><div class=line>  }</div><div class=line>})</div><div class=line></div><div class=line><span class=keyword>new</span> Vue({</div><div class=line>  myOption: <span class=string>\'hello!\'</span></div><div class=line>})</div><div class=line><span class=comment>// -&gt; "hello!"</span></div></pre></td></tr></table></figure><p class=tip>慎用全局混合，因为它影响到每个创建的 Vue 实例，包括第三方组件。在大多数情况下，它应当只用于自定义选项，就像上面示例一样。</p> <h2 id=->自定义选项合并策略</h2> <p>在合并自定义选项时，默认的合并策略是简单地覆盖已有值。如果想用自定义逻辑合并自定义选项，则向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line>Vue.config.optionMergeStrategies.myOption = <span class=function><span class=keyword>function</span> (<span class=params>toVal, fromVal</span>) </span>{</div><div class=line>  <span class=comment>// 返回 mergedVal</span></div><div class=line>}</div></pre></td></tr></table></figure><p>对于多数值为对象的选项，可以简单地使用 <code>methods</code> 所用的合并策略:</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> strategies = Vue.config.optionMergeStrategies</div><div class=line>strategies.myOption = strategies.methods</div></pre></td></tr></table></figure>'}});