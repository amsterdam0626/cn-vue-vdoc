webpackJsonp([27],{55:function(s,a,n){var l,t;__vdoc_config_=n(85),t=n(127),s.exports=l||{},s.exports.__esModule&&(s.exports=s.exports["default"]),t&&(("function"==typeof s.exports?s.exports.options:s.exports).html=t)},85:function(s,a){},127:function(s,a){s.exports='<h2 id=->方法处理器</h2> <p>可以用 <code>v-on</code> 指令监听 DOM 事件：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>id</span>=<span class=string>"example"</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>button</span> <span class=attr>v-on:click</span>=<span class=string>"greet"</span>&gt;</span>Greet<span class=tag>&lt;/<span class=name>button</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><p>我们绑定了一个单击事件处理器到一个方法 <code>greet</code>。下面在 Vue 实例中定义这个方法：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>var</span> vm = <span class=keyword>new</span> Vue({</div><div class=line>  el: <span class=string>\'#example\'</span>,</div><div class=line>  data: {</div><div class=line>    name: <span class=string>\'Vue.js\'</span></div><div class=line>  },</div><div class=line>  methods: {</div><div class=line>    greet: <span class=function><span class=keyword>function</span> (<span class=params>event</span>) </span>{</div><div class=line>      alert(<span class=string>\'Hello \'</span> + <span class=keyword>this</span>.name + <span class=string>\'!\'</span>)</div><div class=line>      alert(event.target.tagName)</div><div class=line>    }</div><div class=line>  }</div><div class=line>})</div><div class=line><span class=comment>// 也可以在 JavaScript 代码中调用方法</span></div><div class=line>vm.greet() <span class=comment>// -&gt; \'Hello Vue.js!\'</span></div></pre></td></tr></table></figure><p>自己测试一下：</p> <div id=example class=demo> <button v-on:click=greet>Greet</button> <script>var vm = new Vue({\n  el: &#39;#example&#39;,\n  data: {\n    name: &#39;Vue.js&#39;\n  },\n  methods: {\n    greet: function (event) {\n      alert(&#39;Hello &#39; + this.name + &#39;!&#39;)\n      alert(event.target.tagName)\n    }\n  }\n})</script> </div> <h2 id=->内联语句处理器</h2> <p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>id</span>=<span class=string>"example-2"</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>button</span> <span class=attr>v-on:click</span>=<span class=string>"say(\'hi\')"</span>&gt;</span>Say Hi<span class=tag>&lt;/<span class=name>button</span>&gt;</span></div><div class=line>  <span class=tag>&lt;<span class=name>button</span> <span class=attr>v-on:click</span>=<span class=string>"say(\'what\')"</span>&gt;</span>Say What<span class=tag>&lt;/<span class=name>button</span>&gt;</span></div><div class=line><span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=keyword>new</span> Vue({</div><div class=line>  el: <span class=string>\'#example-2\'</span>,</div><div class=line>  methods: {</div><div class=line>    say: <span class=function><span class=keyword>function</span> (<span class=params>msg</span>) </span>{</div><div class=line>      alert(msg)</div><div class=line>    }</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p>Result:</p> <div id=example-2 class=demo> <button v-on:click="say(\'hi\')">Say Hi</button> <button v-on:click="say(\'what\')">Say What</button> <script>new Vue({\n      el: &#39;#example-2&#39;,\n      methods: {\n        say: function (msg) {\n          alert(msg)\n        }\n      }\n    })</script> </div> <p>类似于内联表达式，事件处理器限制为<strong>一个语句</strong>。</p> <p>有时也需要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>button</span> <span class=attr>v-on:click</span>=<span class=string>"say(\'hello!\', $event)"</span>&gt;</span>Submit<span class=tag>&lt;/<span class=name>button</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=comment>// ...</span></div><div class=line>methods: {</div><div class=line>  say: <span class=function><span class=keyword>function</span> (<span class=params>msg, event</span>) </span>{</div><div class=line>    <span class=comment>// 现在我们可以访问原生事件对象</span></div><div class=line>    event.preventDefault()</div><div class=line>  }</div><div class=line>}</div></pre></td></tr></table></figure><h2 id=->事件修饰符</h2> <p>在事件处理器中经常需要调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code>。尽管我们在方法内可以轻松做到，不过让方法是纯粹的数据逻辑而不处理 DOM 事件细节会更好。</p> <p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供两个 <strong>事件修饰符</strong>：<code>.prevent</code> 与 <code>.stop</code>。你是否还记得修饰符是点号打头的指令后缀？</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=comment>&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>a</span> <span class=attr>v-on:click.stop</span>=<span class=string>"doThis"</span>&gt;</span><span class=tag>&lt;/<span class=name>a</span>&gt;</span></div><div class=line></div><div class=line><span class=comment>&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>form</span> <span class=attr>v-on:submit.prevent</span>=<span class=string>"onSubmit"</span>&gt;</span><span class=tag>&lt;/<span class=name>form</span>&gt;</span></div><div class=line></div><div class=line><span class=comment>&lt;!-- 修饰符可以串联 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>a</span> <span class=attr>v-on:click.stop.prevent</span>=<span class=string>"doThat"</span>&gt;</span></div><div class=line></div><div class=line><span class=comment>&lt;!-- 只有修饰符 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>form</span> <span class=attr>v-on:submit.prevent</span>&gt;</span><span class=tag>&lt;/<span class=name>form</span>&gt;</span></div></pre></td></tr></table></figure><p>1.0.16 添加了两个额外的修饰符：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=comment>&lt;!-- 添加事件侦听器时使用 capture 模式 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-on:click.capture</span>=<span class=string>"doThis"</span>&gt;</span>...<span class=tag>&lt;/<span class=name>div</span>&gt;</span></div><div class=line></div><div class=line><span class=comment>&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>div</span> <span class=attr>v-on:click.self</span>=<span class=string>"doThat"</span>&gt;</span>...<span class=tag>&lt;/<span class=name>div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=->按键修饰符</h2> <p>在监听键盘事件时，我们经常需要检测 keyCode。Vue.js 允许为 <code>v-on</code> 添加按键修饰符：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=comment>&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>input</span> <span class=attr>v-on:keyup.13</span>=<span class=string>"submit"</span>&gt;</span></div></pre></td></tr></table></figure><p>记住所有的 keyCode 比较困难，Vue.js 为最常用的按键提供别名：</p> <figure class="highlight html"><table><tr><td class=code><pre><div class=line><span class=comment>&lt;!-- 同上 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>input</span> <span class=attr>v-on:keyup.enter</span>=<span class=string>"submit"</span>&gt;</span></div><div class=line></div><div class=line><span class=comment>&lt;!-- 缩写语法 --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>input</span> @<span class=attr>keyup.enter</span>=<span class=string>"submit"</span>&gt;</span></div></pre></td></tr></table></figure><p>全部的按键别名：</p> <ul> <li>enter</li> <li>tab</li> <li>delete</li> <li>esc</li> <li>space</li> <li>up</li> <li>down</li> <li>left</li> <li>right</li> </ul> <p><strong>1.0.8+：</strong> 支持单字母按键别名。</p> <p><strong>1.0.17+：</strong> 可以自定义按键别名：</p> <figure class="highlight js"><table><tr><td class=code><pre><div class=line><span class=comment>// 可以使用 @keyup.f1</span></div><div class=line>Vue.directive(<span class=string>\'on\'</span>).keyCodes.f1 = <span class=number>112</span></div></pre></td></tr></table></figure><h2 id=-html->为什么在 HTML 中监听事件?</h2> <p>你可能注意到这种事件监听的方式违背了传统理念 “separation of concern”。不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护困难。实际上，使用 <code>v-on</code> 有几个好处：</p> <ol> <li><p>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</p> </li> <li><p>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</p> </li> <li><p>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。 </p> </li> </ol>'}});