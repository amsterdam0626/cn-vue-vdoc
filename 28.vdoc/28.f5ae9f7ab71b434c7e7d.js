webpackJsonp([28],{54:function(s,a,n){var e,l;__vdoc_config_=n(103),l=n(126),s.exports=e||{},s.exports.__esModule&&(s.exports=s.exports["default"]),l&&(("function"==typeof s.exports?s.exports.options:s.exports).html=l)},103:function(s,a){},126:function(s,a){s.exports="<h2 id=->基础</h2> <p>类似于自定义指令，可以用全局方法 <code>Vue.filter()</code> 注册一个自定义过滤器，它接收两个参数：<strong>过滤器 ID</strong> 和<strong>过滤器函数</strong>。过滤器函数以值为参数，返回转换后的值：</p> <figure class=\"highlight js\"><table><tr><td class=code><pre><div class=line>Vue.filter(<span class=string>'reverse'</span>, <span class=function><span class=keyword>function</span> (<span class=params>value</span>) </span>{</div><div class=line>  <span class=keyword>return</span> value.split(<span class=string>''</span>).reverse().join(<span class=string>''</span>)</div><div class=line>})</div></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=code><pre><div class=line><span class=comment>&lt;!-- 'abc' =&gt; 'cba' --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>span</span> <span class=attr>v-text</span>=<span class=string>\"message | reverse\"</span>&gt;</span><span class=tag>&lt;/<span class=name>span</span>&gt;</span></div></pre></td></tr></table></figure><p>过滤器函数可以接收任意数量的参数：</p> <figure class=\"highlight js\"><table><tr><td class=code><pre><div class=line>Vue.filter(<span class=string>'wrap'</span>, <span class=function><span class=keyword>function</span> (<span class=params>value, begin, end</span>) </span>{</div><div class=line>  <span class=keyword>return</span> begin + value + end</div><div class=line>})</div></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=code><pre><div class=line><span class=comment>&lt;!-- 'hello' =&gt; 'before hello after' --&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>span</span> <span class=attr>v-text</span>=<span class=string>\"message | wrap 'before' 'after'\"</span>&gt;</span><span class=tag>&lt;/<span class=name>span</span>&gt;</span></div></pre></td></tr></table></figure><h2 id=->双向过滤器</h2> <p>目前我们使用过滤器都是在把来自模型的值显示在视图之前转换它。不过也可以定义一个过滤器，在把来自视图（<code>&lt;input&gt;</code> 元素）的值写回模型之前转化它：</p> <figure class=\"highlight js\"><table><tr><td class=code><pre><div class=line>Vue.filter(<span class=string>'currencyDisplay'</span>, {</div><div class=line>  <span class=comment>// model -&gt; view</span></div><div class=line>  <span class=comment>// 在更新 `&lt;input&gt;` 元素之前格式化值</span></div><div class=line>  read: <span class=function><span class=keyword>function</span>(<span class=params>val</span>) </span>{</div><div class=line>    <span class=keyword>return</span> <span class=string>'$'</span>+val.toFixed(<span class=number>2</span>)</div><div class=line>  },</div><div class=line>  <span class=comment>// view -&gt; model</span></div><div class=line>  <span class=comment>// 在写回数据之前格式化值</span></div><div class=line>  write: <span class=function><span class=keyword>function</span>(<span class=params>val, oldVal</span>) </span>{</div><div class=line>    <span class=keyword>var</span> number = +val.replace(<span class=regexp>/[^\\d.]/g</span>, <span class=string>''</span>)</div><div class=line>    <span class=keyword>return</span> <span class=built_in>isNaN</span>(number) ? <span class=number>0</span> : <span class=built_in>parseFloat</span>(number.toFixed(<span class=number>2</span>))</div><div class=line>  }</div><div class=line>})</div></pre></td></tr></table></figure><p>示例：</p> <p></p><div id=two-way-filter-demo class=demo> <input type=text v-model=\"money | currencyDisplay\"> <p>Model value: {{money}}</p> </div><p></p> <script>new Vue({el:\"#two-way-filter-demo\",data:{money:123.45},filters:{currencyDisplay:{read:function(e){return\"$\"+e.toFixed(2)},write:function(e,r){var t=+e.replace(/[^\\d.]/g,\"\");return isNaN(t)?0:parseFloat(t.toFixed(2))}}}})</script> <h2 id=->动态参数</h2> <p>如果过滤器参数没有用引号包起来，则它会在当前 vm 作用域内动态计算。另外，过滤器函数的 <code>this</code> 始终指向调用它的 vm。例如：</p> <figure class=\"highlight html\"><table><tr><td class=code><pre><div class=line><span class=tag>&lt;<span class=name>input</span> <span class=attr>v-model</span>=<span class=string>\"userInput\"</span>&gt;</span></div><div class=line><span class=tag>&lt;<span class=name>span</span>&gt;</span>{{msg | concat userInput}}<span class=tag>&lt;/<span class=name>span</span>&gt;</span></div></pre></td></tr></table></figure><figure class=\"highlight js\"><table><tr><td class=code><pre><div class=line>Vue.filter(<span class=string>'concat'</span>, <span class=function><span class=keyword>function</span> (<span class=params>value, input</span>) </span>{</div><div class=line>  <span class=comment>// `input` === `this.userInput`</span></div><div class=line>  <span class=keyword>return</span> value + input</div><div class=line>})</div></pre></td></tr></table></figure><p>上例比较简单，也可以用表达式达到相同的结果，但是对于更复杂的逻辑——需要多于一个语句，这时需要将它放到计算属性或自定义过滤器中。</p> <p>内置过滤器 <code>filterBy</code> 和 <code>orderBy</code>，根据所属 Vue 实例的当前状态，过滤/排序传入的数组。</p>"}});